{"Data":{"GitHub":{"Issues":[{"Id":"612621739","IsPullRequest":true,"CreatedAt":"2020-05-08T05:08:10","Actor":"hughbe","Number":"3213","RawContent":null,"Title":"Cleanup DataGridViewRow tests and add sync with DataGridViewColumn","State":"closed","Body":"## Proposed Changes\r\n- Contributes to #3209\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3213)","Url":"https://github.com/dotnet/winforms/pull/3213","RelatedDescription":"Closed or merged PR \"Cleanup DataGridViewRow tests and add sync with DataGridViewColumn\" (#3213)"},{"Id":"613221170","IsPullRequest":true,"CreatedAt":"2020-05-08T03:14:29","Actor":"hughbe","Number":"3226","RawContent":null,"Title":"Cleanup and nullable annotate ProfessionalColors","State":"closed","Body":"## Proposed Changes\r\n- Cleanup and nullable annotate ProfessionalColors\r\n\r\nPretty trivial\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3226)","Url":"https://github.com/dotnet/winforms/pull/3226","RelatedDescription":"Closed or merged PR \"Cleanup and nullable annotate ProfessionalColors\" (#3226)"},{"Id":"614333524","IsPullRequest":true,"CreatedAt":"2020-05-08T02:08:09","Actor":"hughbe","Number":"3236","RawContent":null,"Title":"Nullable annotate ApplicationContext","State":"closed","Body":"## Proposed Changes\r\n- Nullable annotate ApplicationContext\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3236)","Url":"https://github.com/dotnet/winforms/pull/3236","RelatedDescription":"Closed or merged PR \"Nullable annotate ApplicationContext\" (#3236)"},{"Id":"614349114","IsPullRequest":true,"CreatedAt":"2020-05-07T21:16:39","Actor":"hughbe","Number":"3237","RawContent":null,"Title":"Nullable annotate InputLanguage","State":"open","Body":"## Proposed Changes\r\n- Nullable annotate InputLanguage\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3237)","Url":"https://github.com/dotnet/winforms/pull/3237","RelatedDescription":"Open PR \"Nullable annotate InputLanguage\" (#3237)"},{"Id":"614003589","IsPullRequest":true,"CreatedAt":"2020-05-07T12:04:43","Actor":"hughbe","Number":"3235","RawContent":null,"Title":"Nullable annotate TextRender and dependencies","State":"open","Body":"## Proposed Changes\r\n- Nullable annotate TextRender and dependencies\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3235)","Url":"https://github.com/dotnet/winforms/pull/3235","RelatedDescription":"Open PR \"Nullable annotate TextRender and dependencies\" (#3235)"},{"Id":"613707493","IsPullRequest":true,"CreatedAt":"2020-05-07T01:17:12","Actor":"lonitra","Number":"3234","RawContent":null,"Title":"Implement Subtitle Property for ListViewGroup","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2655\r\n\r\n\r\n## Proposed changes\r\n\r\n- Add subtitle API to `ListViewGroup`\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Customers will have the ability to add subtitles to their ListViewGroups\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/30007367/81241913-8240d080-8fc0-11ea-81b2-c2c56b30f54d.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/30007367/81241820-3ee66200-8fc0-11ea-8112-0c79af80c202.png)\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Unit testing\r\n- Manual testing\r\n\r\n## Note\r\n- Correct me if I'm wrong, but for accessibility purposes I believe we'll need to expose the UIA Text Pattern\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3234)","Url":"https://github.com/dotnet/winforms/pull/3234","RelatedDescription":"Open PR \"Implement Subtitle Property for ListViewGroup\" (#3234)"},{"Id":"612674294","IsPullRequest":true,"CreatedAt":"2020-05-07T01:15:33","Actor":"hughbe","Number":"3219","RawContent":null,"Title":"Remove invalid debug assert in GetSystemMetricsForDpi","State":"closed","Body":"We shouldn't have this throw an error because some machines run on windows 8, for example, which we support\r\n\r\nFixes #534\r\nContributes to #3121 \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3219)","Url":"https://github.com/dotnet/winforms/pull/3219","RelatedDescription":"Closed or merged PR \"Remove invalid debug assert in GetSystemMetricsForDpi\" (#3219)"},{"Id":"612653734","IsPullRequest":true,"CreatedAt":"2020-05-06T23:48:30","Actor":"hughbe","Number":"3216","RawContent":null,"Title":"Change Assert.Same for font to Assert.Equal","State":"closed","Body":"This can occasionally fail, e.g. https://dev.azure.com/dnceng/public/_build/results?buildId=631405&view=ms.vss-test-web.build-test-results-tab&runId=19691272&resultId=100052&paneView=debug\r\n\r\n```\r\nAssert.Same() Failure\r\nExpected: [Font: Name=Segoe UI, Size=9, Units=3, GdiCharSet=1, GdiVerticalFont=False]\r\nActual: [Font: Name=Segoe UI, Size=9, Units=3, GdiCharSet=1, GdiVerticalFont=False]\r\n   at System.Windows.Forms.Tests.FontDialogTests.FontDialog_Reset_Invoke_Success() in /_/src/System.Windows.Forms/tests/UnitTests/System/Windows/Forms/FontDialogTests.cs:line 620\r\n```\r\n\r\nSee https://github.com/dotnet/winforms/issues/1222\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3216)","Url":"https://github.com/dotnet/winforms/pull/3216","RelatedDescription":"Closed or merged PR \"Change Assert.Same for font to Assert.Equal\" (#3216)"},{"Id":"613619757","IsPullRequest":true,"CreatedAt":"2020-05-06T21:19:02","Actor":"M-Lipin","Number":"3233","RawContent":null,"Title":"Adding UIA accessibility support for PictureBox control","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3232 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding UIA accessibility support for PictureBox control.\r\n- Moving PictureBox accessible object implementation to a separate file.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Improving development experience for ListView control accessibility.\r\n- Prerequisite to fix #2164.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/81228245-6b1cd580-8ff6-11ea-8de5-c1f75b62c77e.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/81229228-21cd8580-8ff8-11ea-84dc-45248cea61d0.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing;\r\n- Unit tests (to be implemented);\r\n- UI automation.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n- Inspect;\r\n- Accessibility Insights;\r\n- Narrator and other accessibility client apps.\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3233)","Url":"https://github.com/dotnet/winforms/pull/3233","RelatedDescription":"Open PR \"Adding UIA accessibility support for PictureBox control\" (#3233)"},{"Id":"613607857","IsPullRequest":false,"CreatedAt":"2020-05-06T20:56:19","Actor":"M-Lipin","Number":"3232","RawContent":null,"Title":"PictureBox control does not support UIA accessibility","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n![image](https://user-images.githubusercontent.com/23213980/81227292-dc5b8900-8ff4-11ea-8696-4fa4f0bb05f9.png)\r\n\r\nAccessibility providers:\r\n[pid:23288,providerId:0x70F0E Main:Nested [pid:23476,providerId:0x70F0E Main(parent link):Microsoft: MSAA Proxy (unmanaged:UIAutomationCore.dll)]; Hwnd(parent link):Microsoft: HWND Proxy (unmanaged:uiautomationcore.dll)]\"\r\n\r\n**Expected behavior:**\r\nThere should be UIA accessibility provider from WinForms.\r\n\r\n**Minimal repro:**\r\nCreate WinForms app with PictureBox control and analyze it using Inspect.\r\n\r\nRelated item:\r\nThis work item is the sub of #2164","Url":"https://github.com/dotnet/winforms/issues/3232","RelatedDescription":"Open issue \"PictureBox control does not support UIA accessibility\" (#3232)"},{"Id":"613605541","IsPullRequest":true,"CreatedAt":"2020-05-06T20:52:06","Actor":"hughbe","Number":"3231","RawContent":null,"Title":"Fix ILegacyIAccessibleProvider.GetSelection return type","State":"open","Body":"## Proposed Changes\r\nRunning the following test \r\n\r\n```cs\r\n[WinFormsFact]\r\npublic void AccesibleObject_ILegacyIAccessibleProviderGetSelection_Invoke_ReturnsExpected()\r\n{\r\n    var o = new AccessibleObject();\r\n    Test_ILegacyIAccessibleProviderGetSelection(o);\r\n}\r\n\r\n[DllImport(NativeTests, ExactSpelling = true)]\r\nprivate static extern void Test_ILegacyIAccessibleProviderGetSelection(\r\n    [MarshalAs(UnmanagedType.IUnknown)] object pUnk);\r\n```\r\n\r\n```cpp\r\n#define TEST extern \"C\" __declspec(dllexport)\r\n\r\nTEST void WINAPI Test_ILegacyIAccessibleProviderGetSelection(IUnknown* pUnknown)\r\n{\r\n    HRESULT hr;\r\n    ILegacyIAccessibleProvider* pLegacyIAccessibleProvider;\r\n\r\n    hr = pUnknown->QueryInterface(IID_ILegacyIAccessibleProvider, (void**)&pLegacyIAccessibleProvider);\r\n    assert(hr == S_OK);\r\n\r\n#if false\r\n    SAFEARRAY *result = (SAFEARRAY*)(long)0xdeadbeef;\r\n    hr = pLegacyIAccessibleProvider->GetSelection(&result);\r\n    assert(hr == S_OK);\r\n    assert(result->cbElements == 1);\r\n    assert(static_cast<IRawElementProviderSimple*>(result->pvData) == NULL);\r\n    SafeArrayDestroy(result);\r\n#endif\r\n\r\n    // Negative tests\r\n    hr = pLegacyIAccessibleProvider->GetSelection(NULL);\r\n    assert(hr == S_OK);\r\n\r\n    return S_OK;\r\n});\r\n}\r\n```\r\n\r\nI get an assertion failure in\r\n```cs\r\nhr = pLegacyIAccessibleProvider->GetSelection(&result);\r\nassert(hr == S_OK);\r\n```\r\n\r\nInstead of `S_OK`, I get `COR_E_SAFEARRAYTYPEMISMATCH` (0x80131533) returned as the HRESULT.\r\n\r\nTaking a look at the native definition, we seem to be returning `object[]` instead of an interface array. So I think we end up marshalling an array of variants (?) definitely not the interface! \r\n\r\nFrom https://github.com/tpn/winsdk-10/blob/master/Include/10.0.10240.0/um/UIAutomationCore.idl#L845\r\n```cpp\r\nHRESULT GetSelection (\r\n    [out, retval] SAFEARRAY(IRawElementProviderSimple *) * pvarSelectedChildren );\r\n```\r\n\r\nThe fix is to correct the return value.\r\n\r\n## Discussion\r\nFollowing on from https://github.com/dotnet/runtime/issues/35855, should we create our own `SAFEARRAY` type and somehow pass this in as a pointer?\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3231)","Url":"https://github.com/dotnet/winforms/pull/3231","RelatedDescription":"Open PR \"Fix ILegacyIAccessibleProvider.GetSelection return type\" (#3231)"},{"Id":"613602623","IsPullRequest":true,"CreatedAt":"2020-05-06T20:46:38","Actor":"M-Lipin","Number":"3230","RawContent":null,"Title":"Moving GroupBox accessible object to a separate file","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3229 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Moving GroupBox accessible object to a separate file.\r\n- Minor refactoring and code style changes.\r\n- No functional changes.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Improving development experience for GroupBox control accessibility.\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/81226520-a7026b80-8ff3-11ea-9749-1514b125b424.png)\r\n\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/81226420-80443500-8ff3-11ea-935a-4d2e20eafdef.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing.\r\n- Separated accessible object should be covered by unit test.\r\n- UI automation.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n- Inspect too.\r\n- Accessibility client apps.\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3230)","Url":"https://github.com/dotnet/winforms/pull/3230","RelatedDescription":"Open PR \"Moving GroupBox accessible object to a separate file\" (#3230)"},{"Id":"613594661","IsPullRequest":false,"CreatedAt":"2020-05-06T20:32:06","Actor":"M-Lipin","Number":"3229","RawContent":null,"Title":"GroupBoxAccessibleObject class definition should be in a separate file","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\nGroupBoxAccessibleObject class definition is located in the same file as a GroupBox control definition.\r\n\r\n\r\n**Expected behavior:**\r\n\r\nGroupBoxAccessibleObject class should be in a separate file and GroupBox class should be partial.\r\n","Url":"https://github.com/dotnet/winforms/issues/3229","RelatedDescription":"Open issue \"GroupBoxAccessibleObject class definition should be in a separate file\" (#3229)"},{"Id":"613541039","IsPullRequest":true,"CreatedAt":"2020-05-06T18:58:29","Actor":"M-Lipin","Number":"3228","RawContent":null,"Title":"Adding CheckBox control UIA accessibility","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3227\r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding UIA providers support for CheckBox control.\r\n- Moving CheckBox control accessible object to a separate file.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Improving development experience for Button control accessibility.\r\n- Prerequisite to fix #2164\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/81215671-56364700-8fe2-11ea-9183-7088f188c9f1.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/81216702-0193cb80-8fe4-11ea-84fb-76666a553f6c.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing.\r\n- Unit tests.\r\n- UI automation tests.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n- Inspect tool (need to ensure that Inspect properties are similar to what we had before switching to UIA as well as accessibility actions should work properly: Default action, Toggle action and so on)\r\n- Accessibility Insights\r\n- Narrator\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3228)","Url":"https://github.com/dotnet/winforms/pull/3228","RelatedDescription":"Open PR \"Adding CheckBox control UIA accessibility\" (#3228)"},{"Id":"613532160","IsPullRequest":false,"CreatedAt":"2020-05-06T18:43:33","Actor":"M-Lipin","Number":"3227","RawContent":null,"Title":"CheckBox control does not support UIA accessibility","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n![image](https://user-images.githubusercontent.com/23213980/81215671-56364700-8fe2-11ea-9183-7088f188c9f1.png)\r\n\r\n**Accessibility providers:**\r\n[pid:15032,providerId:0x40CA8 Main:Nested [pid:12228,providerId:0x40CA8 Main(parent link):Microsoft: MSAA Proxy (unmanaged:UIAutomationCore.dll)];\r\nHwnd(parent link):Microsoft: HWND Proxy (unmanaged:uiautomationcore.dll)]\"\r\n\r\n\r\n**Expected behavior:**\r\nThere should be UIA accessibility provider from WinForms\r\n\r\n**Minimal repro:**\r\nCreate WinForms app with CheckBox control and analyze it using Inspect.\r\n\r\n**Related item:**\r\nThis work item is the sub of #2164","Url":"https://github.com/dotnet/winforms/issues/3227","RelatedDescription":"Open issue \"CheckBox control does not support UIA accessibility\" (#3227)"},{"Id":"612655842","IsPullRequest":true,"CreatedAt":"2020-05-06T06:06:02","Actor":"hughbe","Number":"3217","RawContent":null,"Title":"Fix skipping TableLayoutSettings_Serialize_InvalidStringConverter_DeserializeThrowsSerializationException","State":"closed","Body":"Fixes #3046 \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3217)","Url":"https://github.com/dotnet/winforms/pull/3217","RelatedDescription":"Closed or merged PR \"Fix skipping TableLayoutSettings_Serialize_InvalidStringConverter_DeserializeThrowsSerializationException\" (#3217)"},{"Id":"612966251","IsPullRequest":true,"CreatedAt":"2020-05-06T00:01:38","Actor":"JeremyKuhne","Number":"3225","RawContent":null,"Title":"Provide internals test utilities","State":"open","Body":"Add internals accessor helpers\r\n\r\nIntroduces ITestAccessor and related classes to keep test specific code out of the shipping assemblies.\r\n\r\nAllows easy dynamic access to private/internal fields and members and provides a pattern for writing typed accessors.\r\n\r\nAlso supports creating of delegates, which allows for access to members that utilize ref structs which are not yet supported in reflection.\r\n\r\nRemoves existing TestAccessor classes from the shipping code. Updates most of the internal virtual methods on TextBox to private protected to encapsulate. Various comment / line spacing fixes to TextBox.\r\n\r\nThere are three commits in this PR. The first two clean up tests and internal access for the EventHandlerService. I kept them separate as they don't depend on the new functionality as I removed all of the internals access there.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3225)","Url":"https://github.com/dotnet/winforms/pull/3225","RelatedDescription":"Open PR \"Provide internals test utilities\" (#3225)"},{"Id":"612679361","IsPullRequest":true,"CreatedAt":"2020-05-05T23:08:59","Actor":"hughbe","Number":"3220","RawContent":null,"Title":"Move Application_VisualStyleState_Set_ReturnsExpected to RemoteExecutor","State":"closed","Body":"Fixes #2192\r\n\r\nThis should make the test resilient in the future\r\n\r\n/cc @weltkante \n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3220)","Url":"https://github.com/dotnet/winforms/pull/3220","RelatedDescription":"Closed or merged PR \"Move Application_VisualStyleState_Set_ReturnsExpected to RemoteExecutor\" (#3220)"},{"Id":"612899739","IsPullRequest":true,"CreatedAt":"2020-05-05T21:15:19","Actor":"M-Lipin","Number":"3224","RawContent":null,"Title":"Adding ListView control UIA accessibility","State":"open","Body":"Implementing UIA for ListView control.\r\nMoving ListView accessible objects to separate files.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3223 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Adding UIA accessibility support for ListView control.\r\n- Moving ListView accessibility to separate files.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Improving development experience for ListView control accessibility.\r\n- Prerequisite to fix #2164\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/81116178-94256380-8f2d-11ea-8b59-c2c25d9291a2.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/81116685-7c021400-8f2e-11ea-93d1-36c7fa11bdb2.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing.\r\n- Unit tests.\r\n- Automation tests.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3224)","Url":"https://github.com/dotnet/winforms/pull/3224","RelatedDescription":"Open PR \"Adding ListView control UIA accessibility\" (#3224)"},{"Id":"612896718","IsPullRequest":false,"CreatedAt":"2020-05-05T21:09:21","Actor":"M-Lipin","Number":"3223","RawContent":null,"Title":"ListView control does not support UIA accessibility","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\n\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n\r\n**Providers:**\r\n[pid:28344,providerId:0x31378 Main:Nested [pid:26684,providerId:0x31378 Main(parent link):Microsoft: ListView Proxy (unmanaged:UIAutomationCore.dll)];\r\nNonclient:Microsoft: Non-Client Proxy (unmanaged:uiautomationcore.dll);\r\nHwnd(parent link):Microsoft: HWND Proxy (unmanaged:uiautomationcore.dll)]\"\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/81116178-94256380-8f2d-11ea-8b59-c2c25d9291a2.png)\r\n\r\n\r\n**Expected behavior:**\r\nThere should be UIA accessibility provider from WinForms\r\n\r\n**Minimal repro:**\r\nCreate WinForms app with ListView control and analyze it using Inspect.\r\n\r\n**Related item:**\r\nThis work item is the sub of #2164","Url":"https://github.com/dotnet/winforms/issues/3223","RelatedDescription":"Open issue \"ListView control does not support UIA accessibility\" (#3223)"},{"Id":"612775640","IsPullRequest":false,"CreatedAt":"2020-05-05T17:35:26","Actor":"kpreisser","Number":"3222","RawContent":null,"Title":"TaskDialog.ShowDialog() doesn't install WindowsFormsSynchronizationContext","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n5.0.100-preview.5.20255.2\r\n\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\n\r\nCurrently, `TaskDialog.ShowDialog()` doesn't install the `WindowsFormsSynchronizationContext`, so when showing the task dialog from a thread that didn't call a `Control` constructor and which currently isn't running a message loop e.g. with `Form.ShowDialog()` or `Application.Run()`, continuations of async methods that were initiated from an task dialog event won't run on the same thread used to show the task dialog.\r\n\r\n\r\n**Expected behavior:**\r\n\r\nI think `TaskDialog.ShowDialog` should install the `WindowsFormsSynchronizationContext` before actually showing the dialog if `SynchronizationContext.Current` isn't an `WindowsFormsSynchronizationContext`, and in that case, should also uninstall it after the native `TaskDialogIndirect` returns.\r\n\r\nNote: It seems `MessageBox.Show()` also doesn't install the `WindowsFormsSynchronizationContext`, but there it's probably not that important since yout normally don't handle events within `MessageBox.Show()`.\r\n\r\nWhat do you think?\r\n\r\n**Minimal repro:**\r\n```c#\r\n[STAThread]\r\nstatic void Main()\r\n{\r\n    Application.EnableVisualStyles();\r\n    var mainThread = Thread.CurrentThread;\r\n\r\n    var myPage = new TaskDialogPage();\r\n    myPage.Created += async (s, e) =>\r\n    {\r\n        Console.WriteLine(\"TaskDialog.ShowDialog():\");\r\n        Console.WriteLine(\"Is WindowsFormsSynchronizationContext: \" +\r\n            (SynchronizationContext.Current is WindowsFormsSynchronizationContext));\r\n\r\n        await Task.Yield();\r\n\r\n        Console.WriteLine(\"Is Main Thread: \" + (Thread.CurrentThread == mainThread));\r\n        Console.WriteLine();\r\n        myPage.BoundDialog!.Close();\r\n    };\r\n    TaskDialog.ShowDialog(myPage);\r\n\r\n    using var myForm = new Form();\r\n    myForm.Load += async (s, e) =>\r\n    {\r\n        Console.WriteLine(\"Form.ShowDialog():\");\r\n        Console.WriteLine(\"Is WindowsFormsSynchronizationContext: \" +\r\n            (SynchronizationContext.Current is WindowsFormsSynchronizationContext));\r\n\r\n        await Task.Yield();\r\n\r\n        Console.WriteLine(\"Is Main Thread: \" + (Thread.CurrentThread == mainThread));\r\n        Console.WriteLine();\r\n        myForm.Close();\r\n    };\r\n    myForm.ShowDialog();\r\n}\r\n```\r\n\r\n**Actual output:**\r\n\r\n```\r\nTaskDialog.ShowDialog():\r\nIs WindowsFormsSynchronizationContext: False\r\nIs Main Thread: False\r\n\r\nForm.ShowDialog():\r\nIs WindowsFormsSynchronizationContext: True\r\nIs Main Thread: True\r\n```\r\n\r\n**Expected output:**\r\n\r\n```\r\nTaskDialog.ShowDialog():\r\nIs WindowsFormsSynchronizationContext: True\r\nIs Main Thread: True\r\n\r\nForm.ShowDialog():\r\nIs WindowsFormsSynchronizationContext: True\r\nIs Main Thread: True\r\n```","Url":"https://github.com/dotnet/winforms/issues/3222","RelatedDescription":"Open issue \"TaskDialog.ShowDialog() doesn't install WindowsFormsSynchronizationContext\" (#3222)"},{"Id":"612719109","IsPullRequest":true,"CreatedAt":"2020-05-05T16:07:01","Actor":"hughbe","Number":"3221","RawContent":null,"Title":"Dispose everything in DesignerSurface related tests","State":"open","Body":"\r\nSo I'm investigating #1460 and #1151. \r\n\r\nIt seems like the failure in `DesignerHost_Add_ComponentDisposeThrowsDuringUnloadingDispose_ThrowsInvalidOperationException` and `DesignSurface_View_GetWithInvalidSupportedTechnologies_ThrowsNotSupportedException` etc. etc. are related to locking of `LicenseManager`. Not really sure how to fix this in the tests.\r\n\r\nIt seems like the failure in `DesignerHost_Add_DuringUnload_ThrowsException` and `SiteNestedContainer_Add_Unloading_Nop` are unrelated to this and instead related to `DesignSurface.CreateDesigner` returning null. See https://github.com/dotnet/winforms/issues/1460#issuecomment-515985498\r\n\r\nLooking at the stack trace of the failure in #1560\r\n```cs\r\n  System.Exception : There is no designer for the class System.ComponentModel.Design.Tests.DesignerHostTests+DesignerComponent.\r\n  Stack Trace:\r\n    /_/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/DesignerHost.cs(244,0): at System.ComponentModel.Design.DesignerHost.AddToContainerPostProcess(IComponent component, String name, IContainer containerToAddTo)\r\n    /_/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/DesignerHost.cs(151,0): at System.ComponentModel.Design.DesignerHost.PerformAdd(IComponent component, String name)\r\n    /_/src/System.Windows.Forms.Design/src/System/ComponentModel/Design/DesignerHost.cs(141,0): at System.ComponentModel.Design.DesignerHost.Add(IComponent component, String name)\r\n       at System.ComponentModel.Container.Add(IComponent component)\r\n    /_/src/System.Windows.Forms.Design/tests/UnitTests/System/ComponentModel/Design/DesignerHostTests.cs(874,0): at System.ComponentModel.Design.Tests.DesignerHostTests.DesignerHost_Add_DuringUnload_ThrowsException()\r\n```\r\n\r\nFor the record, the failing test is below, and we fail at `host.Container.Add`\r\n```cs\r\npublic void DesignerHost_Add_DuringUnload_ThrowsException()\r\n{\r\n    using var surface = new SubDesignSurface();\r\n    IDesignerLoaderHost2 host = surface.Host;\r\n    surface.BeginLoad(typeof(RootDesignerComponent));\r\n\r\n    using var component = new DesignerComponent();\r\n    host.Container.Add(component);\r\n    int callCount = 0;\r\n    component.Disposed += (sender, e) =>\r\n    {\r\n        using var newComponent = new DesignerComponent();\r\n        Assert.Throws<Exception>(() => host.Container.Add(newComponent));\r\n        callCount++;\r\n    };\r\n    surface.Dispose();\r\n    Assert.Equal(1, callCount);\r\n    Assert.False(surface.IsLoaded);\r\n    Assert.Empty(surface.LoadErrors);\r\n    Assert.False(host.Loading);\r\n}\r\n```\r\n\r\nI had a little theory that this could be because of the code in `AddToContainerPostProcess`. Basically, it seems like we are `_rootComponent == null`, even though I'm fairly sure we don't expect it to be. Problems happen because we look for `IRootDesigner`, which the components we're adding don't implement.\r\n \r\n```cs\r\nIDesigner designer;\r\n// Is this the first component the loader has created?  If so, then it must be the root component (by definition) so we will expect there to be a root designer associated with the component.  Otherwise, we search for a normal designer, which can be optionally provided.\r\nif (_rootComponent == null)\r\n{\r\n    designer = _surface.CreateDesigner(component, true) as IRootDesigner;\r\n    if (designer == null)\r\n    {\r\n        Exception ex = new Exception(string.Format(SR.DesignerHostNoTopLevelDesigner, component.GetType().FullName))\r\n        {\r\n            HelpLink = SR.DesignerHostNoTopLevelDesigner\r\n        };\r\n        throw ex;\r\n    }\r\n}\r\n```\r\n\r\nI looked at the code and saw nothing was being disposed in any of the test code.\r\n\r\nSo in terms of the locking problem, I thought that this might be a problem because `LicenseManager` lock may have been held and not released because we didn't dispose of anything. However, this didn't seem to be the case.\r\n- I don't really have much of an idea about how to fix these tests. It seems odd that they only failed in the tests that we disabled, and not be disabled again (I could repro a test failure in `DesignSurface_View_GetWithInvalidSupportedTechnologies_ThrowsNotSupportedException` but this test has been enabled for 9+ months on the CI)\r\n- Maybe we could wrap each test in `RemoteExecutor.Invoke` but I am a bit reluctant to do this as it creates additional strains on test execution and seems a bit odd.\r\n\r\nI then suspected that something was problematic in that we were not disposing of any components within the classes and this could cause `_rootComponent` to equal null somehow\r\n- This didn't seem to be the case either.\r\n\r\nAll in all, I fell back stumped. However, its good practice to dispose of anything in test code, so I kept the changes here and am submitting them.\r\n\r\nI'm not sure if this will fix anything, but ah well\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3221)","Url":"https://github.com/dotnet/winforms/pull/3221","RelatedDescription":"Open PR \"Dispose everything in DesignerSurface related tests\" (#3221)"},{"Id":"612671807","IsPullRequest":true,"CreatedAt":"2020-05-05T15:00:44","Actor":"hughbe","Number":"3218","RawContent":null,"Title":"Fix BindingContext tests","State":"open","Body":"## Proposed Changes\r\n- Don't reuse theory data in same `IEnumerable<T>`. Move test out of `Theory` and into a `Fact` - I think there were some `WeakReference` bugs in that the lifetime of a `WeakReference` is only in the theory data and not in the test\r\n\r\nAlso dispose of all `IDisposable` objects.\r\nAlso reduce calling of `internal` APIs by using subclasses (this let me copy-paste the test into .NET Framework and everything built successfully)\r\n\r\nFixes https://github.com/dotnet/winforms/issues/1031\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3218)","Url":"https://github.com/dotnet/winforms/pull/3218","RelatedDescription":"Open PR \"Fix BindingContext tests\" (#3218)"},{"Id":"612649254","IsPullRequest":true,"CreatedAt":"2020-05-05T14:31:37","Actor":"M-Lipin","Number":"3215","RawContent":null,"Title":"Fixng 3214 - UIA providers support for Button control","State":"open","Body":"Adding UIA providers support for Button's accessibility.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3214\r\n\r\n\r\n## Proposed changes\r\n\r\n- Moving ButtonAccessibleObject to a separate file.\r\n- Moving ButtonBaseAccessibleObject to a separate file.\r\n- Adding UIA providers support for Button control accessi\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Improving development experience for Button control accessibility.\r\n- Prerequisite to fix #2164 \r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Miniaml\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n![image](https://user-images.githubusercontent.com/23213980/81074322-84882980-8ef1-11ea-98c1-ec750b5ea3a1.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/81077788-1bef7b80-8ef6-11ea-9caa-8a67d9f6e39d.png)\r\n\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing.\r\n- Unit tests.\r\n- Automation tests (to be implemented).\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3215)","Url":"https://github.com/dotnet/winforms/pull/3215","RelatedDescription":"Open PR \"Fixng 3214 - UIA providers support for Button control\" (#3215)"},{"Id":"612625585","IsPullRequest":false,"CreatedAt":"2020-05-05T13:59:43","Actor":"M-Lipin","Number":"3214","RawContent":null,"Title":"Button control does not support UIA accessibility","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n* .NET Core Version: \r\n<!-- e.g. 3.0 Preview1, or daily build number, use `dotnet --info` -->\r\n.NET Core 5.0\r\nVersion: 5.0.100-alpha.1.20073.10\r\nCommit: 29f4d693a9\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.18363\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\nHost (useful for support):\r\nVersion: 5.0.0-alpha.1.20072.3\r\nCommit: c3dc1fdfdc\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\n<!-- Yes / No -->\r\nYes\r\n\r\n**Problem description:**\r\n\r\n<!--\r\n    Describe the current behavior, what is wrong or not working as expected.\r\n    Provide as much information as possible, including callstack for crashes/exceptions, screenshots or animations.\r\n  -->\r\n![image](https://user-images.githubusercontent.com/23213980/81074322-84882980-8ef1-11ea-98c1-ec750b5ea3a1.png)\r\n\r\nAccessibility providers:\r\n[pid:43924,providerId:0x12AC8 Main:Nested [pid:1456,providerId:0x12AC8 Main(parent link):Microsoft: MSAA Proxy (unmanaged:UIAutomationCore.dll)];\r\nHwnd(parent link):Microsoft: HWND Proxy (unmanaged:uiautomationcore.dll)]\"\r\n\r\n\r\n**Expected behavior:**\r\nThere should be UIA accessibility provider from WinForms\r\n\r\n**Minimal repro:**\r\nCreate WinForms app with Button control and analyze it using Inspect.\r\n\r\n**Related item:**\r\nThis work item is the sub of #2164\r\n","Url":"https://github.com/dotnet/winforms/issues/3214","RelatedDescription":"Open issue \"Button control does not support UIA accessibility\" (#3214)"},{"Id":"612508674","IsPullRequest":false,"CreatedAt":"2020-05-05T10:47:47","Actor":"kirsan31","Number":"3212","RawContent":null,"Title":"SplitterWidth set in designer not preserve for nested splitContainers","State":"open","Body":"* .NET Core Version: **3.1.3**\r\n\r\n* Have you experienced this same bug with .NET Framework?: **Yes**\r\n\r\n**Problem description:**\r\n\r\nSplitterWidth set in designer not preserve for splitContainer inside other splitContainer:\r\n![Snipaste_2020-05-05_13-38-28](https://user-images.githubusercontent.com/17767561/81058101-6d880e00-8ed6-11ea-8226-aecd71d060fb.png)\r\nWorkaround - set `splitContainer2.SplitterWidth` in constructor after `InitializeComponent();`\r\n\r\n\r\n**Expected behavior:**\r\nRun time SplitterWidth must be the same as in designer.\r\n\r\n**Minimal repro:**\r\n[WinFormsCoreTest_spliter.zip](https://github.com/dotnet/winforms/files/4580258/WinFormsCoreTest_spliter.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/3212","RelatedDescription":"Open issue \"SplitterWidth set in designer not preserve for nested splitContainers\" (#3212)"},{"Id":"612264835","IsPullRequest":true,"CreatedAt":"2020-05-05T02:01:19","Actor":"RussKie","Number":"3211","RawContent":null,"Title":"Disable dealocking tests","State":"closed","Body":"Refer to #3209\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3211)","Url":"https://github.com/dotnet/winforms/pull/3211","RelatedDescription":"Closed or merged PR \"Disable dealocking tests\" (#3211)"},{"Id":"612263448","IsPullRequest":true,"CreatedAt":"2020-05-05T01:12:14","Actor":"RussKie","Number":"3210","RawContent":null,"Title":"Make default encoding retrieval resilient","State":"open","Body":"Relates to #3032 and #3100\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\n\r\n\r\n## Proposed changes\r\n\r\n- Make default encoding retrieval resilient in cases where user's encoding is not recognised by .NET's implementation, e.g. `codepage = 65001`. Refer to the [docs](https://docs.microsoft.com/dotnet/api/system.text.codepagesencodingprovider).\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3210)","Url":"https://github.com/dotnet/winforms/pull/3210","RelatedDescription":"Open PR \"Make default encoding retrieval resilient\" (#3210)"},{"Id":"612246643","IsPullRequest":false,"CreatedAt":"2020-05-05T00:08:42","Actor":"RussKie","Number":"3209","RawContent":null,"Title":"Flaky test: `DataGridViewRow_PaintCells_Invoke_Success` deadlock","State":"open","Body":"<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n\r\n\r\n**Problem description:**\r\n\r\nObserving almost permanent test deadlocks locally and on build agents, especially after correcting test decorations in https://github.com/dotnet/winforms/pull/3064.\r\nInspecting a memory dump of a locally hung test process I got the following:\r\n\r\n![image](https://user-images.githubusercontent.com/4403806/81024826-f9d70880-8eb7-11ea-9d2e-cf0fe33bd3ec.png)\r\n\r\n```\r\n \tSystem.Windows.Forms.Primitives.dll!Interop.User32.SendMessageW(IHandle hWnd = {System.Windows.Forms.DataGridView}, Interop.User32.WM Msg = CHANGEUISTATE, System.IntPtr wParam = 0x0000000000030001, System.IntPtr lParam = 0x0000000000000000) Line 36\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.Control.ShowFocusCues.get() Line 3710\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewTextBoxCell.PaintPrivate(System.Drawing.Graphics graphics = {System.Drawing.Graphics}, System.Drawing.Rectangle clipBounds = {X = 1 Y = 2 Width = 100 Height = 100}, System.Drawing.Rectangle cellBounds = {X = 42 Y = 2 Width = 100 Height = 100}, int rowIndex = 0, System.Windows.Forms.DataGridViewElementStates cellState = Displayed, object formattedValue = \"\", string errorText = \"\", System.Windows.Forms.DataGridViewCellStyle cellStyle = {System.Windows.Forms.DataGridViewCellStyle}, System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle = {System.Windows.Forms.DataGridViewAdvancedBorderStyle}, System.Windows.Forms.DataGridViewPaintParts paintParts = All, bool computeContentBounds = false, bool computeErrorIconBounds = false, bool paint = true) Line 705\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewTextBoxCell.Paint(System.Drawing.Graphics graphics = {System.Drawing.Graphics}, System.Drawing.Rectangle clipBounds = {X = 1 Y = 2 Width = 100 Height = 100}, System.Drawing.Rectangle cellBounds = {X = 42 Y = 2 Width = 100 Height = 100}, int rowIndex = 0, System.Windows.Forms.DataGridViewElementStates cellState = Displayed, object value = null, object formattedValue = \"\", string errorText = \"\", System.Windows.Forms.DataGridViewCellStyle cellStyle = {System.Windows.Forms.DataGridViewCellStyle}, System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle = {System.Windows.Forms.DataGridViewAdvancedBorderStyle}, System.Windows.Forms.DataGridViewPaintParts paintParts = All) Line 606\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewCell.PaintWork(System.Drawing.Graphics graphics = {System.Drawing.Graphics}, System.Drawing.Rectangle clipBounds = {X = 1 Y = 2 Width = 100 Height = 100}, System.Drawing.Rectangle cellBounds = {X = 42 Y = 2 Width = 100 Height = 100}, int rowIndex = 0, System.Windows.Forms.DataGridViewElementStates cellState = Displayed, System.Windows.Forms.DataGridViewCellStyle cellStyle = {System.Windows.Forms.DataGridViewCellStyle}, System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle = {System.Windows.Forms.DataGridViewAdvancedBorderStyle}, System.Windows.Forms.DataGridViewPaintParts paintParts = All) Line 4287\tC#\tSymbols loaded.\r\n \tSystem.Windows.Forms.dll!System.Windows.Forms.DataGridViewRow.PaintCells(System.Drawing.Graphics graphics = {System.Drawing.Graphics}, System.Drawing.Rectangle clipBounds = {X = 1 Y = 2 Width = 100 Height = 100}, System.Drawing.Rectangle rowBounds = {X = 1 Y = 2 Width = 100 Height = 100}, int rowIndex = 0, System.Windows.Forms.DataGridViewElementStates rowState = Displayed, bool isFirstDisplayedRow = true, bool isLastVisibleRow = false, System.Windows.Forms.DataGridViewPaintParts paintParts = All) Line 1617\tC#\tSymbols loaded.\r\n>\tSystem.Windows.Forms.Tests.dll!System.Windows.Forms.Tests.DataGridViewRowTests.DataGridViewRow_PaintCells_Invoke_Success(System.Windows.Forms.DataGridViewRow row = {System.Windows.Forms.DataGridViewRow}, System.Drawing.Rectangle clipBounds = {X = 1 Y = 2 Width = 100 Height = 100}, System.Drawing.Rectangle rowBounds = {X = 1 Y = 2 Width = 100 Height = 100}, int rowIndex = 0, System.Windows.Forms.DataGridViewElementStates rowState = Displayed, bool isFirstDisplayedRow = true, bool isLastVisibleRow = false, System.Windows.Forms.DataGridViewPaintParts paintParts = All) Line 3263\tC#\tSymbols loaded.\r\n```\r\n\r\nThere doesn't appear any other threads with code from System.Windows.Forms, so it looks like this code deadlocks on itself.\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/3209","RelatedDescription":"Open issue \"Flaky test: `DataGridViewRow_PaintCells_Invoke_Success` deadlock\" (#3209)"},{"Id":"612119455","IsPullRequest":true,"CreatedAt":"2020-05-04T19:40:02","Actor":"M-Lipin","Number":"3208","RawContent":null,"Title":"Fixing issue 3206: Label control accessibility reworking","State":"open","Body":"Adding unit tests.\r\n\r\n<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #3206 \r\n\r\n\r\n## Proposed changes\r\n\r\n- Moving LabelAccessibleObject to a separate file.\r\n- Ensured UIA accessibility support.\r\n- Adding unit tests.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- Improving development experience for Label control accessibility. \r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- Minimal\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/80997736-716e4e80-8e4a-11ea-8c75-6ebf11bffc97.png)\r\n\r\n### After\r\n\r\n<!-- TODO -->\r\n![image](https://user-images.githubusercontent.com/23213980/81006352-0deb1d80-8e58-11ea-969a-962677440207.png)\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual testing;\r\n- Unit testing;\r\n- UIA automation.\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n<!-- use `dotnet --info` -->\r\n.NET Core 5.0\r\n\r\n Version:   5.0.100-alpha.1.20073.10\r\n Commit:    29f4d693a9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-05536\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha.1.20072.3\r\n  Commit:  c3dc1fdfdc\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/3208)","Url":"https://github.com/dotnet/winforms/pull/3208","RelatedDescription":"Open PR \"Fixing issue 3206: Label control accessibility reworking\" (#3208)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-05-08T05:30:50.0035094Z","RunDurationInMilliseconds":617}