{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet.org will continue to support TLS 1.0 and 1.1 until further notice","PublishedOn":"2020-04-22T23:53:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In that post, we announced that NuGet.org would...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-continue-to-support-tls-1-0-and-1-1-until-further-notice/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"12306151224","Type":"PullRequestEvent","CreatedAt":"2020-05-12T00:33:30","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7989","RelatedDescription":"Opened pull request \"Remove unnecessary binding redirect\" (#7989) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/3128"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"12307163589","Type":"IssuesEvent","CreatedAt":"2020-05-12T03:42:24","Actor":"nealef","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9547","RelatedDescription":"Opened issue \"Big Endian problem with EndOfCentralDirectoryRecord \" (#9547) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet.exe - NuGet version (5.5.0.6319)\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Run NuGet install of any package - for example build NuGet.Client\r\n\r\nOn Big Endian platforms:\r\n```\r\n/home/neale/NuGet.Client/build/bootstrap.proj : error : One or more errors occurred. (Byte signature not found in package archive:  0x06054B50)\r\n```\r\nIn ```EndOfCentralDirectoryRecord.cs``` the value ```Signature``` is defined as:\r\n```\r\ninternal const uint Signature = 0x06054b50;\r\n```\r\nAnd is (only?) used to check/locate the end of central directory signature via:\r\n```\r\nvar byteSignature = BitConverter.GetBytes(Signature);\r\n```\r\nWhich results in different values depending on platform-endianess. \r\n\r\n- LE: ```504b0506```\r\n- BE: ```06054b50```\r\n\r\nAs ```Signature``` can't be declared as ```const byte[]``` would this suffice?\r\n```\r\ndiff --git a/src/NuGet.Core/NuGet.Packaging/Signing/Archive/EndOfCentralDirectoryRecord.cs b/src/NuGet.Core/NuGet.Packaging/Signing/Archive/EndOfCentralDirectoryRecord.cs\r\nindex f754422a3..086a76860 100644\r\n--- a/src/NuGet.Core/NuGet.Packaging/Signing/Archive/EndOfCentralDirectoryRecord.cs\r\n+++ b/src/NuGet.Core/NuGet.Packaging/Signing/Archive/EndOfCentralDirectoryRecord.cs\r\n@@ -52,6 +52,9 @@ private static void SeekToEndOfCentralDirectoryRecord(BinaryReader reader)\r\n             var byteSignature = BitConverter.GetBytes(Signature);\r\n             var length = reader.BaseStream.Length;\r\n\r\n+           if (!BitConverter.IsLittleEndian)\r\n+                Array.Reverse(byteSignature);\r\n+\r\n             if (length < byteSignature.Length)\r\n             {\r\n                 ThrowByteSignatureNotFoundException(byteSignature);\r\n```"},{"Id":"12304844397","Type":"IssuesEvent","CreatedAt":"2020-05-11T21:14:08","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/5175","RelatedDescription":"Closed issue \"NuGet VS and nuget.exe restore with different results in project.lock.json\" (#5175) at NuGet/Home","RelatedBody":"[Download All Attachments.zip](https://github.com/NuGet/Home/files/982267/Download.All.Attachments.zip)\r\n## Details about Problem\r\n\r\nThe problem is the NuGet Package Manager in Visual Studio automatic restore writes different output to the project.lock.json file than nuget.exe does.  The end result is three xml files in TelerikLib.nupkg are omitted from the build.  Dir output for both scenarios is below.\r\n\r\n1. If I run a build + automated restore from visual studio I get my nupkg restored and built into the bin folder minus three xml files. 12 files total.\r\n\r\nMay/07/2017  10:39 AM    <DIR>          .\r\nMay/07/2017  10:39 AM    <DIR>          ..\r\nMay/06/2017  11:19 AM           315,904 TelerickLib.dll\r\nMay/06/2017  11:19 AM         2,657,280 Telerik.WinControls.dll\r\nMay/06/2017  11:19 AM         1,644,544 Telerik.WinControls.GridView.dll\r\nMay/06/2017  11:19 AM           590,848 Telerik.WinControls.Themes.TelerikMetro.dll\r\nMay/06/2017  11:19 AM         4,862,464 Telerik.WinControls.UI.dll\r\nMay/06/2017  11:19 AM           342,016 TelerikCommon.dll\r\nMay/07/2017  10:39 AM             7,680 WindowsFormsApplication1.exe\r\nMay/07/2017  10:28 AM               184 WindowsFormsApplication1.exe.config\r\nMay/07/2017  10:39 AM            19,968 WindowsFormsApplication1.pdb\r\nMay/07/2017  10:28 AM            22,688 WindowsFormsApplication1.vshost.exe\r\nMay/07/2017  10:28 AM               184 WindowsFormsApplication1.vshost.exe.config\r\nJul/16/2016  07:44 AM               490 WindowsFormsApplication1.vshost.exe.manifest\r\n              **12 File(s)     10,464,250 bytes**\r\n               2 Dir(s)  334,890,049,536 bytes free\r\n\r\n\r\n\r\n\r\n2. If I disable automatic restore (no checkboxes set in VS options.Nuget), but run nuget.exe restore on the solution and follow with a build I get the three xml files as well as TelerikLib.dll.\r\n\r\nMay/07/2017  10:46 AM    <DIR>          .\r\nMay/07/2017  10:46 AM    <DIR>          ..\r\nMay/06/2017  11:19 AM           315,904 TelerickLib.dll\r\nMay/06/2017  11:19 AM         2,657,280 Telerik.WinControls.dll\r\nMay/06/2017  11:19 AM         1,644,544 Telerik.WinControls.GridView.dll\r\nMay/06/2017  11:19 AM         1,236,915 Telerik.WinControls.GridView.xml\r\nMay/06/2017  11:19 AM           590,848 Telerik.WinControls.Themes.TelerikMetro.dll\r\nMay/06/2017  11:19 AM         4,862,464 Telerik.WinControls.UI.dll\r\nMay/06/2017  11:19 AM         2,973,007 Telerik.WinControls.UI.xml\r\nMay/06/2017  11:19 AM         1,128,044 Telerik.WinControls.xml\r\nMay/06/2017  11:19 AM           342,016 TelerikCommon.dll\r\nMay/07/2017  10:46 AM             7,680 WindowsFormsApplication1.exe\r\nMay/07/2017  10:28 AM               184 WindowsFormsApplication1.exe.config\r\nMay/07/2017  10:46 AM            19,968 WindowsFormsApplication1.pdb\r\nMay/07/2017  10:28 AM            22,688 WindowsFormsApplication1.vshost.exe\r\nMay/07/2017  10:28 AM               184 WindowsFormsApplication1.vshost.exe.config\r\nJul/16/2016  07:44 AM               490 WindowsFormsApplication1.vshost.exe.manifest\r\n              **15 File(s)     15,802,216 bytes\r\n\r\n**\r\n               2 Dir(s)  334,878,879,744 bytes free\r\n\r\nFIFTEEN files.  Three xml files get restored as well, which is what I was expecting within Visual Studio Package Manager.\r\n\r\nTwo different build and restore approaches, but two different outputs?\r\n\r\nI have included a sample winforms project (net new, nothing in it but project.json file) and my TelerikLib.nupkg package.\r\n\r\nIt appears that when the automatic build and restore happens the build writes 117 lines to the project.lock.json file.\r\n\r\nwhen I use the manual restore from nuget.exe and a manual build the process writes 73 lines instead.\r\n\r\nI am including the two project.lock.json files as well for reference.\r\n\r\nThis is just a basic windows forms project.  I do have a full project at work, but the problem exists even with a stripped down project like attached.\r\n\r\nThe two restore approaches (NPM and nuget.exe) seem to write different output to project.lock.json.  That appears to be the root of the problem.\r\n\r\n--------------------------------------------------------------------------------------------\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx): 3.5.0.1938\r\n\r\ndotnet.exe --version (if appropriate):NA\r\n\r\nVS version (if appropriate): VS 2015 Enterprise\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Microsoft Windows [Version 10.0.14393]\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Use automatic build and restore (SET allow Nuget to download missing packages + SET automatically check for missing packages during build in Visual Studio.  Run clean solution and build.  You get 12 files in your bin.\r\n\r\n2. UNSET allow Nuget to download missing packages and UNSET automatically check for missing packages during build in Visual Studio.  Run nuget.exe restore $(SolutionPath), and then build solution in Visual Studio.  You get all 15 files in your bin.\r\n\r\nWhy does VS NPM omit the xml files but nuget.exe restores them just fine?  Should they not behave the same way?\r\n\r\nThe two restore approaches (NPM and nuget.exe) seem to write different output to project.lock.json. That appears to be the root of the problem.\r\n...\r\n\r\n### Sample Project\r\n\r\nI have attached a SAMPLE project, the two project.lock.json file outputs for both scenarios, as well as a copy of the TelerikLib.nupkg file I am using.\r\n\r\n"},{"Id":"12304793019","Type":"IssuesEvent","CreatedAt":"2020-05-11T21:08:20","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/1830","RelatedDescription":"Closed issue \"Build in visual studio fails due to incomplete package restore when projects are unloaded\" (#1830) at NuGet/Home","RelatedBody":"When a project is unloaded in Visual Studio, it ceases to build with solution build. But so long as it was built previously (either at the command line or while loaded in Visual Studio) the rest of the solution should build successfully even across project references that include this unloaded project because the binaries are on disk.\n\nBut with NuGet and project.json, this has regressed. When a project is unloaded that is in the middle of a chain of project references and that chain is what propagates dependencies from a project.json file at a root project, that causes solution build to fail. When the solution build starts, nuget restore rewrites all the project.json files an does so differently than a command line \"nuget restore\" command. In VS, it seems package restore is based on loaded VS projects, so the unloaded VS project causes a partial package restore failure. In particular, the project.json dependencies do not properly propagate to the projects that reference the unloaded project, resulting in build failures in these projects due to missing assembly references.\n\nHere is sample output from one such failed solution build (while CodeGeneration.Roslyn.Tests is unloaded):\n\n```\nRestoring NuGet packages...\nTo prevent NuGet from restoring packages during build, open the Visual Studio Options dialog, click on the Package Manager node and uncheck 'Allow NuGet to download missing packages during build.'\nFailed to resolve all project references for 'CodeGeneration.Roslyn.Tests.Generators'. The package restore result for 'CodeGeneration.Roslyn.Tests.Generators' may be incomplete.\nFailed to resolve all project references for 'CodeGeneration.Roslyn.Tasks'. The package restore result for 'CodeGeneration.Roslyn.Tasks' may be incomplete.\n1>------ Build started: Project: CodeGeneration.Roslyn.Tasks, Configuration: Debug Any CPU ------\n2>------ Build started: Project: CodeGeneration.Roslyn.NuGet, Configuration: Debug Any CPU ------\n1>C:\\Users\\andarno\\git\\CodeGeneration.Roslyn\\src\\CodeGeneration.Roslyn.Tasks\\GenerateCodeFromAttributes.cs(17,34,17,41): error CS0234: The type or namespace name 'MSBuild' does not exist in the namespace 'Microsoft.CodeAnalysis' (are you missing an assembly reference?)\n1>C:\\Users\\andarno\\git\\CodeGeneration.Roslyn\\src\\CodeGeneration.Roslyn.Tasks\\GenerateCodeFromAttributes.cs(18,34,18,38): error CS0234: The type or namespace name 'Text' does not exist in the namespace 'Microsoft.CodeAnalysis' (are you missing an assembly reference?)\n1>C:\\Users\\andarno\\git\\CodeGeneration.Roslyn\\src\\CodeGeneration.Roslyn.Tasks\\GenerateCodeFromAttributes.cs(177,21,177,28): error CS0246: The type or namespace name 'Project' could not be found (are you missing a using directive or an assembly reference?)\n========== Build: 1 succeeded, 1 failed, 2 up-to-date, 0 skipped ==========\n```\n\nNote this repros even when I've successfully run a \"nuget restore\" and build at the command line, then immediately try to build in VS. So very obviously VS is rewriting the project.lock.json files when building, resulting in this failure.\n\nThis breaks scenarios the benefit or even require unloaded projects (such as in my case, where a loaded project results in assemblies getting loaded and locked in the devenv.exe process which breaks the build which rewrites that assembly).\n\n**Repro steps**\n1. Create a new solution.\n2. Add class library **A** project and a project.json to it.\n3. Add a dependency on the nuget Validation package to that project.json file (or any package that delivers assemblies).\n4. Add class library **B**, and a project.json to it.\n5. Add a _project_ reference from B to A.\n6. Add class library **C**, and a project.json to it.\n7. Add a _project_ reference from C to B.\n8. Add a class to class library **C** and a method that calls `Validation.Assumes.True(true);`\n9. Build the solution. Everything works.\n10. Unload project **B**.\n11. Build the solution. This time, the build breaks because `Validation.Assumes` cannot be found.\n12. At the command line, observe that \"nuget restore\" followed by a command line build of the solution works.\n13. Build the solution in VS again. The build is still broken.\n"},{"Id":"12304271041","Type":"IssuesEvent","CreatedAt":"2020-05-11T20:12:08","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8724","RelatedDescription":"Closed issue \"Cannot find version of nuget.exe pack that supports <icon>\" (#8724) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\n\r\nNuGet version: 5.3.0.6260\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win 10 19H1\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Follow the instructions on nuget.org to replace `iconUrl` element with `icon` element\r\n\r\n2. `nuget.exe pack <my nuspec>`\r\n\r\n3. Either of these outputs, depending on which schema is referenced in the nuspec:\r\n\r\nWith no schema specified: \r\n\r\n> The element 'metadata' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd' has invalid child element 'icon' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'. List of possible elements expected: 'copyright, owners, iconUrl, dependencies, summary, repository, serviceable, frameworkReferences, licenseUrl, language, tags, releaseNotes, packageTypes, references, requireLicenseAcceptance, frameworkAssemblies, developmentDependency, contentFiles' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'. This validation error occurred in a 'icon' element.\r\n\r\nUsing `http://schemas.microsoft.com/packaging/2016/06/nuspec.xsd`:\r\n\r\n> The schema version of '<my file>' is incompatible with version 5.3.0.4 of NuGet. Please upgrade NuGet to the latest version from http://go.microsoft.com/fwlink/?LinkId=213942.\r\n\r\n(Needless to say, I _am_ running the latest version from that link.)\r\n\r\nAny suggestions where I can find something that supports the recommended option?"},{"Id":"12304258698","Type":"IssuesEvent","CreatedAt":"2020-05-11T20:10:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8723","RelatedDescription":"Closed issue \"Using ValueTuple with PackageReference on Azure Cloud Services\" (#8723) at NuGet/Home","RelatedBody":"_From @jnyrup on Friday, July 27, 2018 7:34:42 AM_\r\n\r\nThis is the same problem as described in this closed/abandoned [issue](https://github.com/Azure/azure-sdk-for-net/issues/3699). That got closed as being reported the wrong place, that's why I'm trying here.\r\nPlease let me know if this is also not the right repo.\r\n\r\nI'm trying to convert my C# projects from old to new csproj style, but this breaks my Azure Cloud Service at runtime because the ReferenceAssembly of `System.ValueTuple.dll` is copied instead of the *implementing* assembly.\r\n\r\nMy projects are currently targeting .NET 4.6.1, which doesn't come with `System.ValueTuple` but should be able to get it by consuming the `System.ValueTuple` NuGet package.\r\n\r\nThe problem is \"solvable\" by targeting .NET 4.7+, as that comes with `System.ValueTuple` included and hence does not need to reference it as a NuGet package.\r\n\r\nI would like to avoid upgrading to .NET 4.7+ if possible, as:\r\n\r\nThis requires an additional deploy step to install .net 4.7+ runtimes on the worker roles, as they come with .net 4.6.2 installed. https://docs.microsoft.com/en-us/azure/cloud-services/cloud-services-guestos-update-matrix#family-5-releases\r\nThis seems as \"the easy way out\", and I would like to know if the problem can be solved otherwise.\r\n\r\n### Steps to reproduce\r\n\r\nI'll use:\r\n* refDLL for: `packages\\system.valuetuple\\4.5.0\\ref\\net461\\System.ValueTuple.dll`, and\r\n* libDLL for `packages\\system.valuetuple\\4.5.0\\lib\\net461\\System.ValueTuple.dll`.\r\nThey are easily distinguishable, as refDLL is 40 kb and libDLL is 78 kb.\r\n\r\nThe code and complete build log file is found here: \r\n[AzureCloudService1.zip](https://github.com/Microsoft/msbuild/files/2234894/AzureCloudService1.zip)\r\n\r\n* `WorkerRole1` consumes `System.ValueTuple` via `packages.config`\r\n* `WorkerRole2` consumes `System.ValueTuple` via `PackageReference`\r\n\r\nAfter building the cloud service the\r\n\r\n* `WorkerRole1\\bin\\Debug` has libDLL.\r\n* `WorkerRole2\\bin\\Debug\\net461` has libDLL\r\n* `AzureCloudService1\\obj\\Debug\\WorkerRole1` has libDLL\r\n* but `AzureCloudService1\\obj\\Debug\\WorkerRole2` has *refDLL*\r\n\r\n### Expected  behavior\r\n\r\n`AzureCloudService1\\obj\\Debug\\WorkerRole2` should contain *libDLL*.\r\n\r\n### Actual behavior\r\n\r\n`AzureCloudService1\\obj\\Debug\\WorkerRole2` contains *refDLL*.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.7.180.61344 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.7.180.61344\r\n```\r\n\r\n### Addionational info\r\n\r\nFrom the logs, I noticed the following difference between WorkerRole1 and WorkerRole2.\r\n\r\nWorkerRole1:\r\n```\r\nC:\\Users\\jonas\\source\\repos\\AzureCloudService1\\packages\\System.ValueTuple.4.5.0\\lib\\net461\\System.ValueTuple.dll\r\nCopyLocal = true\r\nFusionName = System.ValueTuple, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\nHintPath = ..\\packages\\System.ValueTuple.4.5.0\\lib\\net461\\System.ValueTuple.dll\r\nImageRuntime = v4.0.30319\r\nMSBuildSourceProjectFile = C:\\Users\\jonas\\source\\repos\\AzureCloudService1\\WorkerRole1\\WorkerRole1.csproj\r\nMSBuildSourceTargetName = BuiltProjectOutputGroupDependencies\r\nOriginalItemSpec = System.ValueTuple, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL\r\nReferenceAssembly = C:\\Users\\jonas\\source\\repos\\AzureCloudService1\\packages\\System.ValueTuple.4.5.0\\lib\\net461\\System.ValueTuple.dll\r\nReferenceSourceTarget = ResolveAssemblyReference\r\nResolvedFrom = {HintPathFromItem}\r\nVersion = 4.0.3.0\r\nWorkerRole2:\r\n```\r\n\r\n```\r\nC:\\Users\\jonas\\.nuget\\packages\\system.valuetuple\\4.5.0\\ref\\net461\\System.ValueTuple.dll\r\nCopyLocal = false\r\nExternallyResolved = true\r\nFusionName = System.ValueTuple, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\nHintPath = C:\\Users\\jonas\\.nuget\\packages\\system.valuetuple\\4.5.0\\ref\\net461\\System.ValueTuple.dll\r\nImageRuntime = v4.0.30319\r\nMSBuildSourceProjectFile = C:\\Users\\jonas\\source\\repos\\AzureCloudService1\\WorkerRole2\\WorkerRole2.csproj\r\nMSBuildSourceTargetName = BuiltProjectOutputGroupDependencies\r\nNuGetPackageId = System.ValueTuple\r\nNuGetPackageVersion = 4.5.0\r\nNuGetSourceType = Package\r\nOriginalItemSpec = C:\\Users\\jonas\\.nuget\\packages\\system.valuetuple\\4.5.0\\ref\\net461\\System.ValueTuple.dll\r\nPrivate = false\r\nReferenceAssembly = C:\\Users\\jonas\\.nuget\\packages\\system.valuetuple\\4.5.0\\ref\\net461\\System.ValueTuple.dll\r\nReferenceSourceTarget = ResolveAssemblyReference\r\nResolvedFrom = {HintPathFromItem}\r\nVersion = 4.0.3.0\r\n```\r\n\r\nAfter searching for other related issues on various Microsoft issue trackers, I found this one, which seems related: https://github.com/dotnet/sdk/issues/1738.\r\n\r\n_Copied from original issue: microsoft/msbuild#3551_"},{"Id":"12303256232","Type":"IssuesEvent","CreatedAt":"2020-05-11T18:22:26","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9546","RelatedDescription":"Opened issue \"Warnings for new code in xplat verification branch from CodeAnalysis.FxCopAnalyzer\" (#9546) at NuGet/Home","RelatedBody":"The following warnings are reported by  CodeAnalysis.FxCopAnalyzer in the new code: \r\n\r\n```\r\nSigning\\Cms\\ManagedCmsWrapper.cs(50,43): error CA2000: Call System.IDisposable.Dispose on object created by 'new X509Certificate2(cert)' before all references to it are out of scope. [C:\\repos\\NuGet.Client\\src\\NuGet.Core\\NuGet.Packaging\r\n\\NuGet.Packaging.csproj]\r\n```\r\n\r\n`Signing\\Timestamp\\Rfc3161TimestampProvider.cs(29,42): error CA1823: Unused field 'RequestTimeout'. [C:\\repos\\NuGet.Client\\src\\NuGet.Core\\NuGet.Packaging\\NuGet.Packaging.csproj]`\r\n\r\nWe need to fix them before merging into dev."},{"Id":"12303078162","Type":"IssuesEvent","CreatedAt":"2020-05-11T18:03:45","Actor":"mirkomuggli","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9545","RelatedDescription":"Opened issue \"Hook up FeatureFlags for PMUI in CodeSpaces\" (#9545) at NuGet/Home","RelatedBody":"As part of enabling PMUI for Codespaces, we've now listed as a Feature in Tools->Options->Preview Features (the VS PR to enable this flag is here: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/247442)\r\n\r\nIn PMUI, we should check this feature flag before enabling the \"Manage Nuget Packages\" menu item when connected to Codespaces."},{"Id":"12302317119","Type":"IssuesEvent","CreatedAt":"2020-05-11T16:46:32","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9484","RelatedDescription":"Closed issue \"Use the latest packages for xplat verification\" (#9484) at NuGet/Home","RelatedBody":"We're using version 5.0.0-alpha1.19473.1 of the following two packages:\r\nSystem.Security.Cryptography.Pkcs\r\nSystem.Security.Cryptography.Cng\r\n\r\nWe should use the latest version instead."},{"Id":"12300529619","Type":"IssuesEvent","CreatedAt":"2020-05-11T14:07:23","Actor":"anangaur","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8646","RelatedDescription":"Closed issue \"Restoring packages with GitHub Package Repository configured generates warnings\" (#8646) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe, dotnet restore and Visual Studio\r\n\r\nNuGet version (x.x.x.xxx): 5.3.0.6260\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nVS version (if appropriate): 16.3.1\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win10 v1903 (18362.356) and Linux Docker container (sdk:3.0-alpine)\r\n\r\nWorked before? If so, with which NuGet version: first try at this\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Configure solution to use GitHub package repository via nuget.config\r\n2. Add package references to the project (for example to Newtonsoft.Json)\r\n3. Restore the project witch caches cleared\r\n3.1. Either run `dotnet nuget locals all --clear` or build inside Docker\r\n4. Get warning like this: `NuGet.targets(123,5): warning : NAME_UNKNOWN:Package with name 'newtonsoft.json' was not found in the package source 'organizationName' [/path/to/solution.sln]\r\n\r\n## Other suggested things\r\n\r\nPackages are actually restored successfully, only these warnings show up with every restore/build commands and I haven't found any way to suppress it.\r\n\r\n### Verbose Logs\r\n\r\nDetailed logs from Docker build of attached project\r\n[docker-build-output.log](https://github.com/NuGet/Home/files/3672963/docker-build-output.log)\r\n\r\n### Sample Project\r\nIssue repro. You need to update nuget.config with GitHub PAT that can download packages.\r\n[nuget-restore-issue-repro.zip](https://github.com/NuGet/Home/files/3672978/nuget-restore-issue-repro.zip)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"12187224295","Type":"IssuesEvent","CreatedAt":"2020-04-29T00:36:47","Actor":"chgill-MSFT","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/43","RelatedDescription":"Opened issue \"Showing dependent packages on NuGet.org\" (#43) at NuGet/Announcements","RelatedBody":"The spec for 'Showing dependent packages on NuGet.org (Used By)' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Showing dependent packages on NuGet.org (Used By)](https://github.com/NuGet/Home/wiki/Showing-dependent-packages-on-NuGet.org-(Used-By)) | https://github.com/NuGet/NuGetGallery/issues/4718|"},{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org â€“ Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2020-05-12T05:30:41.4247263Z","RunDurationInMilliseconds":2273}